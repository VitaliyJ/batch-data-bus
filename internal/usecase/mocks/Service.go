// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	externalservice "data-bus/pkg/externalservice"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetLimits provides a mock function with given fields:
func (_m *Service) GetLimits() (uint64, time.Duration) {
	ret := _m.Called()

	var r0 uint64
	var r1 time.Duration
	if rf, ok := ret.Get(0).(func() (uint64, time.Duration)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	return r0, r1
}

// Process provides a mock function with given fields: ctx, batch
func (_m *Service) Process(ctx context.Context, batch externalservice.Batch) error {
	ret := _m.Called(ctx, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, externalservice.Batch) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
