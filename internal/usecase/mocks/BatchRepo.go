// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "data-bus/internal/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BatchRepo is an autogenerated mock type for the BatchRepo type
type BatchRepo struct {
	mock.Mock
}

// AddBatch provides a mock function with given fields: ctx, batch
func (_m *BatchRepo) AddBatch(ctx context.Context, batch entity.Batch) error {
	ret := _m.Called(ctx, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Batch) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFirstBatchItems provides a mock function with given fields: ctx
func (_m *BatchRepo) GetFirstBatchItems(ctx context.Context) (entity.Batch, error) {
	ret := _m.Called(ctx)

	var r0 entity.Batch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Batch, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Batch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Batch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastRequestTime provides a mock function with given fields: ctx
func (_m *BatchRepo) GetLastRequestTime(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLastRequestTime provides a mock function with given fields: ctx, t
func (_m *BatchRepo) SaveLastRequestTime(ctx context.Context, t time.Time) error {
	ret := _m.Called(ctx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBatchRepo creates a new instance of BatchRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchRepo {
	mock := &BatchRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
